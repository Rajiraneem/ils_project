from django.contrib import admin
from django.urls import path
from django.shortcuts import get_object_or_404
from django.template.response import TemplateResponse
from django.utils.html import format_html
from django.http import HttpResponse
from django import forms
from .models import StudentSubmission, Question, Student, Subject,StudentSavedQuestions
from .pdf_utils import generate_student_performance_pdf
import json


# --- Custom PDF Form ---
class PDFEditForm(forms.Form):
    title = forms.CharField(label="Report Title", initial="Student Performance Report", required=False)
    notes = forms.CharField(label="Additional Notes", widget=forms.Textarea, required=False)
    footer = forms.CharField(label="Footer Text", initial="Generated by ILS System", required=False)
    include_chart = forms.BooleanField(label="Include Chart", required=False, initial=True)
    logo = forms.ImageField(label="Logo Image", required=False)
    signature = forms.CharField(label="Editable Signature", required=False, initial="Authorized Signature")


@admin.register(StudentSubmission)
class StudentSubmissionAdmin(admin.ModelAdmin):
    list_display = ('student', 'score', 'submitted_at', 'view_performance', 'view_answers', 'customize_pdf')

    def view_performance(self, obj):
        return format_html(
            '<a class="button" href="{}">View Charts</a>',
            f'/admin/omr_app/studentsubmission/{obj.id}/charts/'
        )
    view_performance.short_description = 'Performance'
    
    def view_answers(self, obj):
        return format_html(
            '<a class="button" href="{}">View Answers</a>',
            f'/admin/omr_app/studentsubmission/{obj.id}/answers/'
        )
    view_answers.short_description = 'Question Analysis'

    def customize_pdf(self, obj):
        return format_html(
            '<a class="button" href="{}">Customize & Download PDF</a>',
            f'/admin/omr_app/studentsubmission/{obj.id}/pdf/edit/'
        )
    customize_pdf.short_description = 'PDF Options'

    def get_urls(self):
        urls = super().get_urls()
        custom_urls = [
            path('<int:submission_id>/charts/', self.admin_site.admin_view(self.chart_view), name='studentsubmission_charts'),
            path('<int:submission_id>/pdf/edit/', self.admin_site.admin_view(self.edit_pdf_form_view), name='studentsubmission_pdf_edit'),
            path('<int:submission_id>/answers/', self.admin_site.admin_view(self.answer_analysis_view), name='studentsubmission_answers'),
        ]
        return custom_urls + urls

    def answer_analysis_view(self, request, submission_id):
        submission = get_object_or_404(StudentSubmission, id=submission_id)
        student = submission.student
        answers = submission.answers or {}
        
        # Get all subjects in this submission
        subjects = submission.subjects.all()
        questions_by_subject = {}
        
        for subject in subjects:
            # Filter questions to only include those that were answered (part of the random selection)
            questions = Question.objects.filter(
                subject=subject, 
                id__in=[int(qid) for qid in answers.keys()]
            )
            
            question_data = []
            
            for question in questions:
                question_id = str(question.id)
                student_answer = answers.get(question_id, None)
                is_correct = (student_answer == question.correct_option)
                
                question_data.append({
                    'id': question.id,
                    'text': question.question_text,
                    'question': question.question_text,
                    'level': question.level,
                    'level_display': question.get_level_display(),
                    'student_answer': student_answer,
                    'correct_answer': question.correct_option,
                    'is_correct': is_correct,
                })
            
            questions_by_subject[subject.name] = {
                'questions': question_data,
                'level_counts': {}  # We'll calculate this from the actual questions
            }
        
        context = {
            **self.admin_site.each_context(request),
            'title': f'Answer Analysis for {student.name}',
            'opts': self.model._meta,
            'original': submission,
            'student': student,
            'submission': submission,
            'questions_by_subject': questions_by_subject,
        }
        return TemplateResponse(request, 'omr_app/answer_analysis.html', context)

    def chart_view(self, request, submission_id):
        submission = get_object_or_404(StudentSubmission, id=submission_id)
        student = submission.student
        subjects = submission.subjects.all()
        answers = submission.answers or {}

        subject_data = []
        level_choices = dict(Question._meta.get_field('level').choices).keys()
        level_data = {}

        for subject in subjects:
            # We need to identify which questions were actually part of the random selection
            # These are the questions that have IDs in the answers dictionary
            subject_questions = Question.objects.filter(subject=subject, id__in=[int(qid) for qid in answers.keys()])
            
            # Now we're only counting questions that were actually presented to the student
            total_questions = subject_questions.count()
            correct = 0
            level_totals = {level: 0 for level in level_choices}
            level_correct = {level: 0 for level in level_choices}

            for q in subject_questions:
                qid_str = str(q.id)
                level_totals[q.level] += 1
                if qid_str in answers and answers[qid_str] == q.correct_option:
                    correct += 1
                    level_correct[q.level] += 1

            subject_data.append({
                'name': subject.name,
                'correct': correct,
                'total': total_questions
            })

            level_data[subject.name] = {
                'level1_correct': level_correct[1],
                'level1_total': level_totals[1],
                'level2_correct': level_correct[2],
                'level2_total': level_totals[2],
                'level3_correct': level_correct[3],
                'level3_total': level_totals[3],
                'level4_correct': level_correct[4],
                'level4_total': level_totals[4],
            }

        chart_data = {
            'subjects': json.dumps([s['name'] for s in subject_data]),
            'scores': json.dumps([s['correct'] for s in subject_data]),
            'totals': json.dumps([s['total'] for s in subject_data]),
            'level_data': json.dumps(level_data),
        }

        context = {
            **self.admin_site.each_context(request),
            'title': f'Performance Charts for {student.name}',
            'opts': self.model._meta,
            'original': submission,
            'student': student,
            'submission': submission,
            'chart_data': chart_data,
        }
        return TemplateResponse(request, 'omr_app/charts.html', context)

    def edit_pdf_form_view(self, request, submission_id):
        submission = get_object_or_404(StudentSubmission, id=submission_id)

        if request.method == 'POST':
            form = PDFEditForm(request.POST, request.FILES)
            if form.is_valid():
                title = form.cleaned_data.get('title')
                notes = form.cleaned_data.get('notes')
                footer = form.cleaned_data.get('footer')
                include_chart = form.cleaned_data.get('include_chart')
                signature = form.cleaned_data.get('signature')

                logo_file = request.FILES.get('logo')
                logo_bytes = logo_file.read() if logo_file else None

                buffer = generate_student_performance_pdf(
                    student_id=submission.student.id,
                    title=title,
                    notes=notes,
                    footer=footer,
                    include_chart=include_chart,
                    logo_bytes=logo_bytes,
                    signature=signature
                )
                filename = f"{submission.student.name.replace(' ', '_')}_custom_report.pdf"
                response = HttpResponse(buffer, content_type='application/pdf')
                response['Content-Disposition'] = f'attachment; filename="{filename}"'
                return response
        else:
            form = PDFEditForm()

        context = dict(
            self.admin_site.each_context(request),
            form=form,
            submission_id=submission_id,
            title='Customize PDF Report'
        )
        return TemplateResponse(request, 'omr_app/edit_pdf_form.html', context)


# Optional PDF Preview View (can wire this up later)
def preview_pdf_view(request, submission_id):
    submission = get_object_or_404(StudentSubmission, id=submission_id)
    form = PDFEditForm(request.POST, request.FILES)
    if form.is_valid():
        data = form.cleaned_data
        logo_file = request.FILES.get('logo')
        buffer = generate_student_performance_pdf(
            student_id=submission.student.id,
            title=data.get('title'),
            notes=data.get('notes'),
            footer=data.get('footer'),
            include_chart=data.get('include_chart', False),
            signature=data.get('signature'),
            logo_bytes=logo_file.read() if logo_file else None
        )
        return HttpResponse(buffer, content_type='application/pdf')
    else:
        return HttpResponse("Form data invalid", status=400)
    

# Register other models
admin.site.register(StudentSavedQuestions)
admin.site.register(Student)
admin.site.register(Subject)
admin.site.register(Question)